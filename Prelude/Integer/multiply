{-
`multiply m n` computes `m * n`.
-}
let ifPositive =
        ./ifPositive sha256:5d489fbcc2da522928dd9ca6dff957eeba67841928d2fe928b7c2b518166b233
      ? ./ifPositive

let multiply
    : Integer → Integer → Integer
    = ifPositive
        (Integer → Integer)
        (   λ(x : Natural)
          → ifPositive
              Integer
              (λ(y : Natural) → Natural/toInteger (x * y))
              (λ(y : Natural) → Integer/negate (Natural/toInteger (x * y)))
        )
        (   λ(x : Natural)
          → ifPositive
              Integer
              (λ(y : Natural) → Integer/negate (Natural/toInteger (x * y)))
              (λ(y : Natural) → Natural/toInteger (x * y))
        )

let example0 = assert : multiply +3 +5 ≡ +15

let example1 = assert : multiply -3 +5 ≡ -15

let example2 = assert : multiply -3 -5 ≡ +15

let example3 = assert : multiply +0 +5 ≡ +0

let example4 = assert : multiply +5 +0 ≡ +0

let example5 = assert : multiply +0 +0 ≡ +0

let example6 = assert : multiply +1 +5 ≡ +5

let example7 = assert : multiply +3 -1 ≡ -3

in  multiply
